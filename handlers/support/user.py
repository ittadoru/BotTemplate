from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from config import SUPPORT_GROUP_ID
from states.support import Support
from utils import logger as log
from db.base import get_session
from db.support import create_ticket, get_ticket, close_ticket, SupportTicket
from sqlalchemy.future import select


router = Router()


@router.callback_query(lambda c: c.data == "help")
async def start_support(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–∂–µ –æ—Ç–∫—Ä—ã—Ç, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± —ç—Ç–æ–º.
    –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    user_id = callback.from_user.id
    username = callback.from_user.username or ""
    async with get_session() as session:
        ticket = await session.execute(
            select(SupportTicket).where(SupportTicket.user_id == user_id, SupportTicket.is_closed == 0)
        )
        ticket = ticket.scalars().first()
        bot = callback.message.bot
        topic_id = None
        if ticket and getattr(ticket, "topic_id", None):
            topic_id = ticket.topic_id
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–µ–º—É —Å user_id
            new_topic = await bot.create_forum_topic(chat_id=SUPPORT_GROUP_ID, name=str(user_id))
            topic_id = new_topic.message_thread_id
            # –°–æ–∑–¥–∞—ë–º —Ç–∏–∫–µ—Ç —Å topic_id
            ticket = await create_ticket(session, user_id, username, topic_id)
        log.log_message(
            f"–û—Ç–∫—Ä—ã—Ç —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è @{username or '–ë–µ–∑ username'} | id={user_id}",
            emoji="üí¨"
        )
        await callback.message.answer(
            "üÜò –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–∫—Ä—ã—Ç!\n"
            "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /stop.\n"
            "–ü–æ–∫–∞ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã."
        )
        if topic_id:
            await bot.send_message(
                SUPPORT_GROUP_ID,
                f"üë§ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç: @{username or '–ë–µ–∑ username'} | {user_id}\n–î–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç.",
                message_thread_id=topic_id
            )
    await state.set_state(Support.waiting_for_message)


@router.message(Command("stop"), Support.waiting_for_message)
async def stop_support(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stop, –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–ø–æ–≤–µ—â–∞–µ—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∏ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    user_id = message.from_user.id
    username = message.from_user.username or ""
    async with get_session() as session:
        ticket = await session.execute(
            select(SupportTicket).where(SupportTicket.user_id == user_id, SupportTicket.is_closed == 0)
        )
        ticket = ticket.scalars().first()
        if ticket:
            await close_ticket(session, user_id)
            log.log_message(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or '–ë–µ–∑ username'} | id={user_id} –∑–∞–∫—Ä—ã–ª —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                emoji="üîí"
            )
            await message.answer("–î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω. –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.")
            topic_id = getattr(ticket, "topic_id", None)
            if topic_id:
                await message.bot.send_message(
                    SUPPORT_GROUP_ID,
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.",
                    message_thread_id=topic_id
                )
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await state.clear()


@router.message(Support.waiting_for_message)
async def forward_to_support(message: Message, state: FSMContext):
    """
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –µ—Å–ª–∏ —Ç–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ.
    """
    user_id = message.from_user.id
    username = message.from_user.username or ""
    async with get_session() as session:
        ticket = await session.execute(
            select(SupportTicket).where(SupportTicket.user_id == user_id, SupportTicket.is_closed == 0)
        )
        ticket = ticket.scalars().first()
        if not ticket:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            await state.clear()
            return
        topic_id = getattr(ticket, "topic_id", None)
        if not topic_id:
            await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /help.")
            await state.clear()
            return
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.text:
                await message.bot.send_message(
                    SUPPORT_GROUP_ID,
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username or '–ë–µ–∑ username'} | {user_id}:\n{message.text}",
                    message_thread_id=topic_id
                )
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if message.photo:
                await message.bot.send_photo(
                    SUPPORT_GROUP_ID,
                    message.photo[-1].file_id,
                    caption=f"–§–æ—Ç–æ –æ—Ç @{username or '–ë–µ–∑ username'} | {user_id}:\n{message.caption or ''}",
                    message_thread_id=topic_id
                )
            log.log_message(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or '–ë–µ–∑ username'} | id={user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: "
                f"{message.text or '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}",
                emoji="üì©"
            )
        except Exception as e:
            from aiogram.exceptions import TelegramBadRequest
            if isinstance(e, TelegramBadRequest) and "message thread not found" in str(e):
                await close_ticket(session, user_id)
                await message.answer("‚ùóÔ∏è –î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /help.")
                await state.clear()
                log.log_error(f"–¢–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id}, topic_id={topic_id}. –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            else:
                log.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
                await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
