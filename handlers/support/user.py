import logging
from typing import Optional

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from config import SUPPORT_GROUP_ID
from db.base import get_session
from db.support import SupportTicket, close_ticket, create_ticket, get_open_ticket
from states.support import Support

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "help")
async def start_support_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞, –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É.
    """
    user_id = callback.from_user.id
    async with get_session() as session:
        open_ticket: Optional[SupportTicket] = await get_open_ticket(session, user_id)
        if open_ticket:
            await callback.answer(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", show_alert=True
            )
            return

    await state.set_state(Support.waiting_for_question)
    await callback.message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç."
    )
    await callback.answer()


@router.message(Support.waiting_for_question)
async def create_ticket_handler(message: Message, state: FSMContext) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.clear()
    user = message.from_user
    user_info = (
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}\n"
        f"<b>ID:</b> <code>{user.id}</code>\n"
        f"<b>Username:</b> {f'@{user.username}' if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        topic = await message.bot.create_forum_topic(
            chat_id=SUPPORT_GROUP_ID, name=f"–¢–∏–∫–µ—Ç –æ—Ç {user.id} ({user.full_name})"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await message.bot.send_message(
            SUPPORT_GROUP_ID, user_info, message_thread_id=topic.message_thread_id
        )
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.copy_to(
            chat_id=SUPPORT_GROUP_ID, message_thread_id=topic.message_thread_id
        )

        async with get_session() as session:
            await create_ticket(
                session,
                user_id=user.id,
                username=user.username,
                topic_id=topic.message_thread_id,
            )

        await message.answer(
            "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.\n\n"
            "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop."
        )
        await state.set_state(Support.in_dialog)
        logger.info(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –≤ —Ç–µ–º–µ %d",
            user.id,
            topic.message_thread_id,
        )

    except Exception as e:
        logger.error(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", user.id, e
        )
        await message.answer(
            "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.message(Support.in_dialog, F.text.lower().in_(["/stop", "—Å—Ç–æ–ø", "–∑–∞–∫—Ä—ã—Ç—å"]))
async def close_ticket_by_user_handler(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    async with get_session() as session:
        ticket: Optional[SupportTicket] = await get_open_ticket(session, user_id)
        if not ticket:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            await state.clear()
            return

        await close_ticket(session, user_id)
        await state.clear()

        await message.answer("–î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        try:
            await message.bot.send_message(
                SUPPORT_GROUP_ID,
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.",
                message_thread_id=ticket.topic_id,
            )
        except Exception as e:
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ %d: %s",
                ticket.topic_id,
                e,
            )
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–∫—Ä—ã–ª —Å–≤–æ–π —Ç–∏–∫–µ—Ç.", user_id)


@router.message(Support.in_dialog)
async def forward_to_support_handler(message: Message) -> None:
    """
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    user_id = message.from_user.id
    async with get_session() as session:
        ticket: Optional[SupportTicket] = await get_open_ticket(session, user_id)
        if not ticket:
            await message.answer("–í–∞—à –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–∂–µ –∑–∞–∫—Ä—ã—Ç. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –Ω–∞–∂–º–∏—Ç–µ /help.")
            return

        try:
            await message.copy_to(
                chat_id=SUPPORT_GROUP_ID, message_thread_id=ticket.topic_id
            )
            logger.info(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç %d",
                user_id,
                ticket.topic_id,
            )
        except Exception as e:
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –≤ —Ç–∏–∫–µ—Ç %d: %s",
                user_id,
                ticket.topic_id,
                e,
            )
            await message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
