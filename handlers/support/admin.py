from aiogram import Router, F, types
from aiogram.types import Message
from config import SUPPORT_GROUP_ID
from db.base import get_session
from db.support import get_ticket, close_ticket, SupportTicket
from sqlalchemy.future import select
from utils import logger as log

router = Router()


@router.message(F.chat.id == SUPPORT_GROUP_ID, F.is_topic_message)
async def admin_reply(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–æ–≤ –≤ —Ç–µ–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —Ç–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç.
    """
    topic_id = message.message_thread_id
    # user_id = await get_user_id_by_topic(session, topic_id)
    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±: user_id = –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
    user_id = None
    async with get_session() as session:
        ticket = await session.execute(
            select(SupportTicket).where(SupportTicket.topic_id == topic_id, SupportTicket.is_closed == 0)
        )
        ticket = ticket.scalars().first()
        if not ticket:
            await message.reply("–¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
            return
        user_id = ticket.user_id
        if message.text:
            await message.bot.send_message(
                user_id,
                f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.text}"
            )
        if message.photo:
            await message.bot.send_photo(
                user_id,
                message.photo[-1].file_id,
                caption=f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.caption or ''}"
            )
        log.log_message(
            f"üë®‚Äçüíª –ê–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id={user_id} –≤ —Ç–∏–∫–µ—Ç–µ topic_id={topic_id}: "
            f"{message.text or '[–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}",
            emoji="üõ†Ô∏è"
        )

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–∫—É–º–µ–Ω—Ç—ã, –∞—É–¥–∏–æ –∏ —Ç.–ø.) –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏


@router.message(F.chat.id == SUPPORT_GROUP_ID, F.is_topic_message, F.text == "/stop")
async def admin_close_ticket(message: Message):
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /stop –æ—Ç –∞–¥–º–∏–Ω–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
    """
    topic_id = message.message_thread_id
    async with get_session() as session:
        ticket = await session.execute(
            select(SupportTicket).where(SupportTicket.topic_id == topic_id, SupportTicket.is_closed == 0)
        )
        ticket = ticket.scalars().first()
        if not ticket:
            return
        user_id = ticket.user_id
        await close_ticket(session, user_id)
        await message.bot.send_message(
            user_id,
            "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ."
        )
        await message.reply("–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–∫—Ä—ã—Ç.")
