import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from db.base import get_session
from db.promocodes import activate_promocode
from states.promo import PromoStates

router = Router()


@router.callback_query(F.data == "promo")
async def promo_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    bot_message = await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
    await state.update_data(last_bot_message_id=bot_message.message_id)
    await state.set_state(PromoStates.user)
    await callback.answer()


@router.message(PromoStates.user)
async def process_user_promocode(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ–≥–æ –∏ —Å–æ–æ–±—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    if not message.text:
        await state.clear()
        return

    code = message.text.strip().upper()
    user = message.from_user

    async with get_session() as session:
        # –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏.
        duration = await activate_promocode(session, user.id, code)

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∫–æ–¥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
    try:
        data = await state.get_data()
        if "last_bot_message_id" in data:
            await message.bot.delete_message(message.chat.id, data["last_bot_message_id"])
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")

    if duration:
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) "
            f"—É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ '{code}' –Ω–∞ {duration} –¥–Ω–µ–π."
        )
        await message.answer(
            f"üéâ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ <b>{duration}</b> –¥–Ω.",
            parse_mode="HTML"
        )
    else:
        logging.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) "
            f"–Ω–µ —Å–º–æ–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ '{code}'."
        )
        await message.answer(
            "‚ö†Ô∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.</b>\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )

    await state.clear()
