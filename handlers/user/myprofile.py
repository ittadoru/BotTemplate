from aiogram import Router, types
from aiogram.types import CallbackQuery
from datetime import datetime
from db.base import get_session
from db.subscribers import get_subscriber_expiry


router = Router()

@router.callback_query(lambda c: c.data == "myprofile")
async def show_profile(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ ID –∏–ª–∏ username, –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if user_id is None:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    async with get_session() as session:
        expire_at = await get_subscriber_expiry(session, user_id)
    if expire_at:
        if expire_at > datetime.now(expire_at.tzinfo):
            subscription_status = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{expire_at.strftime('%d.%m.%Y %H:%M')}</b>"
        else:
            subscription_status = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
    else:
        subscription_status = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

    name = callback.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    username = callback.from_user.username or ""

    user_info = "<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
    user_info += f"ID: <code>{user_id}</code>\n"
    user_info += f"–ò–º—è: {name}\n"
    user_info += f"{subscription_status}\n"
    user_info += f"Username: @{username}\n"

    full_text = user_info

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]
    ])
    await callback.message.edit_text(full_text, parse_mode="HTML", reply_markup=keyboard)
