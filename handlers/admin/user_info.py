import logging
from datetime import datetime

from aiogram import Bot, F, Router, types
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import subscribers as db_subscribers
from db import users as db_users
from db.base import get_session
from states.history import HistoryStates

router = Router()


class UserCallback(CallbackData, prefix="user_admin"):
    """–§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    action: str
    user_id: int


@router.callback_query(F.data == "user_history_start")
async def show_user_history_prompt(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ID –∏–ª–∏ username, –∏–∑–º–µ–Ω—è—è —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –∏ —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    await state.set_state(HistoryStates.waiting_for_id_or_username)
    await state.update_data(message_to_edit=callback.message.message_id)

    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")

    await callback.message.edit_text(
        "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.message(HistoryStates.waiting_for_id_or_username)
async def process_user_lookup(message: types.Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID/username, –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    –ø—Ä–µ–≤—Ä–∞—â–∞—è –µ–≥–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    data = await state.get_data()
    message_id_to_edit = data.get("message_to_edit")
    await state.clear()

    user_identifier = message.text.strip()
    user = None

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID/username
    await message.delete()

    async with get_session() as session:
        if user_identifier.isdigit():
            user = await db_users.get_user_by_id(session, int(user_identifier))
        else:
            username = user_identifier.lstrip("@").lower()
            user = await db_users.get_user_by_username(session, username)

        if not user:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message_id_to_edit,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        is_active = await db_subscribers.is_subscriber(session, user.id)
        if is_active:
            expiry_date = await db_subscribers.get_subscriber_expiry(session, user.id)
            subscription_status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_date.strftime('%d.%m.%Y %H:%M')}"
        else:
            subscription_status = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_info_parts = [
            f"<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n",
            f"<b>ID:</b> <code>{user.id}</code>",
            f"<b>–ò–º—è:</b> {user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
        ]
        if user.username:
            user_info_parts.append(f"<b>Username:</b> @{user.username}")
        if user.created_at:
            user_info_parts.append(f"<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {user.created_at.strftime('%d.%m.%Y %H:%M')}")
        
        user_info_parts.append(f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}")
        user_info_text = "\n".join(user_info_parts)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        callback_data=UserCallback(action="delete", user_id=user.id).pack()
    )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")
    builder.adjust(1)

    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user.id}")
    await bot.edit_message_text(
        text=user_info_text,
        chat_id=message.chat.id,
        message_id=message_id_to_edit,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@router.callback_query(UserCallback.filter(F.action == "delete"))
async def delete_user_handler(callback: types.CallbackQuery, callback_data: UserCallback):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'.
    –ò–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —É–≤–µ–¥–æ–º–ª—è—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.
    """
    user_id_to_delete = callback_data.user_id
    admin_id = callback.from_user.id

    async with get_session() as session:
        success = await db_users.delete_user_by_id(session, user_id_to_delete)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    manage_users_keyboard = InlineKeyboardBuilder()
    manage_users_keyboard.button(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="all_users")
    manage_users_keyboard.button(text="üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="user_history_start")
    manage_users_keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="delete_all_users")
    manage_users_keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
    manage_users_keyboard.adjust(1)

    if success:
        logging.info(f"–ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_delete}")
        text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id_to_delete}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        logging.warning(f"–ê–¥–º–∏–Ω {admin_id} –Ω–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_delete}")
        text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id_to_delete}</code>.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.message.edit_text(
        text=text,
        reply_markup=manage_users_keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

