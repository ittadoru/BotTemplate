from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from states.history import HistoryStates
from datetime import datetime
from utils import logger as log
from db.base import get_session
from db.users import get_all_user_ids
from db.subscribers import Subscriber
from db.users import User


router = Router()


@router.callback_query(lambda c: c.data == "user_history_start")
async def show_user_history(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID –∏–ª–∏ username –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)."""
    await state.set_state(HistoryStates.waiting_for_id_or_username)

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")]
        ]
    )

    await callback.message.edit_text(
        "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(HistoryStates.waiting_for_id_or_username)
async def process_id_or_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ ID –∏–ª–∏ username, –ø–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    arg = message.text.strip()
    user_id = None

    async with get_session() as session:
        if arg.isdigit():
            user_id = int(arg)
        else:
            # –ü–æ–∏—Å–∫ –ø–æ username (–±–µ–∑ @, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
            username = arg.lstrip("@").lower()
            user_ids = await get_all_user_ids(session)
            for uid in user_ids:
                user = await session.get(User, int(uid))
                if user and user.username and user.username.lower() == username:
                    user_id = int(uid)
                    break

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if user_id is None:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return


    async with get_session() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscriber = await session.get(Subscriber, user_id)
        if subscriber and subscriber.expires_at:
            expiry_date = subscriber.expires_at
            if expiry_date > datetime.now():
                subscription_status = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{expiry_date.strftime('%d.%m.%Y %H:%M')}</b>"
            else:
                subscription_status = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
        else:
            subscription_status = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

        name = user.first_name or ""
        username = user.username or ""

    user_info = "<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n\n"
    user_info += f"ID: <code>{user_id}</code>\n"
    user_info += f"–ò–º—è: {name}\n"
    user_info += f"{subscription_status}\n"
    if username:
        user_info += f"Username: @{username}\n"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–∞–¥
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"delete_user:{user_id}")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_users")]
        ]
    )
    log.log_message(f"–ê–¥–º–∏–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", emoji="üìú")
    await message.answer(user_info, parse_mode="HTML", reply_markup=keyboard)
    await state.clear()


async def delete_user_callback(callback: types.CallbackQuery):
    uid = int(callback.data.split(":")[1])

    async with get_session() as session:
        user = await session.get(User, uid)
        if user:
            await session.delete(user)
        subscriber = await session.get(Subscriber, uid)
        if subscriber:
            await session.delete(subscriber)
        await session.commit()

    await callback.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω", show_alert=True)
    log.log_message(f"–ê–¥–º–∏–Ω —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}", emoji="üóëÔ∏è")
