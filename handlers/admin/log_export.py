import logging
import os
import re
from aiogram import F, Router
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

LOG_DIR = "logs"

class LogCallback(CallbackData, prefix="log"):
    """–§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–≥–æ–≤."""
    filename: str

router = Router()

def get_log_files():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    if not os.path.exists(LOG_DIR):
        return []
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ bot_YYYY-MM-DD.log
    log_pattern = re.compile(r"^bot_(\d{4}-\d{2}-\d{2})\.log$")
    
    files = []
    for filename in os.listdir(LOG_DIR):
        if log_pattern.match(filename):
            files.append(filename)
            
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    return sorted(files, reverse=True)

@router.callback_query(F.data == "get_logs")
async def show_log_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–æ–≥–æ–≤: —Ç–µ–∫—É—â–∏–π –∏–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã–π."""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üìÑ –¢–µ–∫—É—â–∏–π –ª–æ–≥", callback_data=LogCallback(filename="bot.log").pack()),
        InlineKeyboardButton(text="üóÇÔ∏è –ê—Ä—Ö–∏–≤–Ω—ã–µ –ª–æ–≥–∏", callback_data="list_archive_logs")
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "list_archive_logs")
async def list_archive_logs(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö –ª–æ–≥–æ–≤ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫."""
    archive_files = get_log_files()
    
    if not archive_files:
        await callback.answer("üóÇÔ∏è –ê—Ä—Ö–∏–≤–Ω—ã–µ –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for filename in archive_files:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        date_str = filename.replace("bot_", "").replace(".log", "")
        builder.row(
            InlineKeyboardButton(
                text=f"üìÑ {date_str}",
                callback_data=LogCallback(filename=filename).pack()
            )
        )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="get_logs"))
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –ª–æ–≥–∞:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(LogCallback.filter())
async def send_log_file(callback: CallbackQuery, callback_data: LogCallback):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    filename = callback_data.filename
    log_path = os.path.join(LOG_DIR, filename)
    user_id = callback.from_user.id

    if not os.path.exists(log_path):
        logging.warning(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥: {filename}")
        await callback.answer(f"‚ùóÔ∏è –§–∞–π–ª –ª–æ–≥–æ–≤ '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if os.path.getsize(log_path) == 0:
        logging.warning(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—É—Å—Ç–æ–π –ª–æ–≥: {filename}")
        await callback.answer(f"‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ '{filename}' –ø—É—Å—Ç.", show_alert=True)
        return

    logging.info(f"–ê–¥–º–∏–Ω {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥: {filename}")
    
    file = FSInputFile(log_path)
    await callback.message.answer_document(file, caption=f"üìÑ –í–∞—à —Ñ–∞–π–ª –ª–æ–≥–æ–≤: `{filename}`")
    await callback.answer()
