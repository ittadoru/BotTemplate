import asyncio
import logging
from contextlib import suppress

from aiogram import F, Bot, Router
from aiogram.exceptions import TelegramAPIError
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)

from db.base import get_session
from db.users import get_user_ids_without_subscription

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ CallbackData ---

class AdBroadcastStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    waiting_text = State()
    waiting_button_text = State()
    waiting_button_url = State()


class AdBroadcastCallback(CallbackData, prefix="ad_broadcast"):
    """
    –§–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏.
    `action`: 'set_text', 'set_button', 'preview', 'send', 'cancel'
    """
    action: str


router = Router()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è UI ---

async def get_constructor_text(state: FSMContext) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.
    """
    return (
        "üì¢ **–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏."
    )


def get_constructor_keyboard() -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç",
                callback_data=AdBroadcastCallback(action="set_text").pack()
            ),
            InlineKeyboardButton(
                text="üîó –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É",
                callback_data=AdBroadcastCallback(action="set_button").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
                callback_data=AdBroadcastCallback(action="preview").pack()
            )
        ],
        [
            InlineKeyboardButton(
                text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                callback_data=AdBroadcastCallback(action="send").pack()
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=AdBroadcastCallback(action="cancel").pack()
            )
        ]
    ])


async def update_constructor_message(message: Message, state: FSMContext):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ FSM.
    """
    text = await get_constructor_text(state)
    keyboard = get_constructor_keyboard()
    with suppress(TelegramAPIError):
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")


# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

@router.callback_query(F.data == "ad_broadcast_start")
async def ad_broadcast_start(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–µ–∫–ª–∞–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏, —Å–±—Ä–∞—Å—ã–≤–∞—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    await state.clear()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –µ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(constructor_message_id=callback.message.message_id)
    await update_constructor_message(callback.message, state)
    await callback.answer()


@router.callback_query(AdBroadcastCallback.filter(F.action == "cancel"))
async def cancel_ad_broadcast(callback: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    from .menu import get_admin_menu_keyboard
    await state.clear()
    await callback.message.edit_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_menu_keyboard()
    )
    await callback.answer()


# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏ ---

@router.callback_query(AdBroadcastCallback.filter(F.action == "set_text"))
async def set_broadcast_text_prompt(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    await state.set_state(AdBroadcastStates.waiting_text)
    prompt = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
    await state.update_data(prompt_message_id=prompt.message_id)
    await callback.answer()


@router.message(AdBroadcastStates.waiting_text)
async def process_broadcast_text(message: Message, state: FSMContext, bot: Bot):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
    """
    await state.update_data(text=message.text)
    await state.set_state(None)  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è

    data = await state.get_data()
    constructor_msg_id = data.get("constructor_message_id")
    prompt_msg_id = data.get("prompt_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with suppress(TelegramAPIError):
        if prompt_msg_id:
            await bot.delete_message(message.chat.id, prompt_msg_id)
        await message.delete()

    if constructor_msg_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        # –°–æ–∑–¥–∞–µ–º "–ø—Ä–æ–∫—Å–∏" –æ–±—ä–µ–∫—Ç Message –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        constructor_message = Message(
            message_id=constructor_msg_id, chat=message.chat, bot=bot
        )
        await update_constructor_message(constructor_message, state)
        
@router.callback_query(AdBroadcastCallback.filter(F.action == "set_button"))
async def set_button_text_prompt(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.
    """
    await state.set_state(AdBroadcastStates.waiting_button_text)
    prompt = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    await state.update_data(prompt_message_id=prompt.message_id)
    await callback.answer()


@router.message(AdBroadcastStates.waiting_button_text)
async def process_button_text(message: Message, state: FSMContext, bot: Bot):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç URL.
    """
    await state.update_data(button_text=message.text)
    await state.set_state(AdBroadcastStates.waiting_button_url)
    
    data = await state.get_data()
    prompt_msg_id = data.get("prompt_message_id")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç
    with suppress(TelegramAPIError):
        if prompt_msg_id:
            await bot.delete_message(message.chat.id, prompt_msg_id)
        await message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    prompt = await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL-–∞–¥—Ä–µ—Å –¥–ª—è –∫–Ω–æ–ø–∫–∏ "
        "(–Ω–∞—á–∏–Ω–∞—è —Å http:// –∏–ª–∏ https://):"
    )
    await state.update_data(prompt_message_id=prompt.message_id)


@router.message(AdBroadcastStates.waiting_button_url)
async def process_button_url(message: Message, state: FSMContext, bot: Bot):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç URL –∫–Ω–æ–ø–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
    """
    url = message.text.strip()
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL, "
            "–Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://."
        )
        return

    await state.update_data(button_url=url)
    await state.set_state(None)

    data = await state.get_data()
    constructor_msg_id = data.get("constructor_message_id")
    prompt_msg_id = data.get("prompt_message_id")

    with suppress(TelegramAPIError):
        if prompt_msg_id:
            await bot.delete_message(message.chat.id, prompt_msg_id)
        await message.delete()

    if constructor_msg_id:
        constructor_message = Message(
            message_id=constructor_msg_id, chat=message.chat, bot=bot
        )
        await update_constructor_message(constructor_message, state)


# --- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---

@router.callback_query(AdBroadcastCallback.filter(F.action == "preview"))
async def preview_ad_broadcast(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    data = await state.get_data()
    text = data.get("text")

    if not text:
        await callback.answer(
            "‚ùóÔ∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True
        )
        return

    button_text = data.get("button_text")
    button_url = data.get("button_url")

    markup = None
    if button_text and button_url:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=button_text, url=button_url)]
        ])

    await callback.message.answer(text, reply_markup=markup)
    await callback.answer()


@router.callback_query(AdBroadcastCallback.filter(F.action == "send"))
async def confirm_and_send_broadcast(
    callback: CallbackQuery, state: FSMContext, bot: Bot
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    data = await state.get_data()
    text = data.get("text")

    if not text:
        await callback.answer(
            "‚ùóÔ∏è –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ó–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç.",
            show_alert=True
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ])

    await callback.message.edit_text(
        "‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è... –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
        reply_markup=keyboard
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(start_broadcast_task(bot, callback.from_user.id, data))

    await state.clear()
    await callback.answer()


async def start_broadcast_task(bot: Bot, admin_id: int, data: dict):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
    """
    text = data.get("text")
    button_text = data.get("button_text")
    button_url = data.get("button_url")

    markup = None
    if button_text and button_url:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=button_text, url=button_url)]
        ])

    sent_count = 0
    failed_count = 0

    async with get_session() as session:
        user_ids = await get_user_ids_without_subscription(session)

    total_users = len(user_ids)
    logger.info(
        f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–µ–∫–ª–∞–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )

    for user_id in user_ids:
        try:
            await bot.send_message(user_id, text, reply_markup=markup)
            sent_count += 1
        except TelegramAPIError as e:
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
            )
            failed_count += 1
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        await asyncio.sleep(0.1)

    logger.info(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, "
        f"–û—à–∏–±–æ–∫: {failed_count}"
    )

    summary_text = (
        f"‚úÖ **–†–µ–∫–ª–∞–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {total_users}\n"
        f"üëç –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"üëé –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å: {failed_count}"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    with suppress(TelegramAPIError):
        await bot.send_message(admin_id, summary_text, parse_mode="Markdown")
