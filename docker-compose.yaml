version: '3.9'
services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    env_file:
      - .env  # берём значения переменных из .env (не коммитьте секреты)
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?must-set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?must-set}
      POSTGRES_DB: ${POSTGRES_DB:?must-set}
    volumes:
      - pgdata:/var/lib/postgresql/data

  app:
    build: .
    image: saverbot-app
    container_name: bot
    restart: always
    working_dir: /app
    volumes:
      - .:/app
    depends_on:
      - postgres
    command: >
      bash -c "
        while ! pg_isready -h postgres -p 5432 -q -U ${POSTGRES_USER}; do
          echo 'Waiting for database...';
          sleep 1
        done;
        echo 'Database is ready!';
        if ls alembic/versions/*.py 1> /dev/null 2>&1; then
          echo 'Found Alembic revisions -> running alembic upgrade head';
          alembic upgrade head || { echo 'Alembic upgrade failed'; exit 1; }
        else
          echo 'No Alembic revisions -> running ensure_schema.py fallback';
          python scripts/ensure_schema.py || { echo 'ensure_schema failed'; exit 1; }
        fi;
        watchfiles --filter python 'python bot.py'
      "

  server:
    image: saverbot-app  # используем уже собранный образ, не билдим второй раз
    container_name: server
    restart: always
    working_dir: /app
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      - postgres
    command: >
      bash -c "
        while ! pg_isready -h postgres -p 5432 -q -U ${POSTGRES_USER}; do
          echo 'Waiting for database (server)...';
          sleep 1
        done;
        if ls alembic/versions/*.py 1> /dev/null 2>&1; then
          echo 'Server: Alembic revisions present (assume schema migrated by app).';
        else
          echo 'Server: ensure_schema fallback (idempotent).';
          python scripts/ensure_schema.py || true
        fi;
        uvicorn server:app --host 0.0.0.0 --port 8000 --reload
      "

volumes:
  pgdata:
