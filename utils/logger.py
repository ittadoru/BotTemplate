import logging
import os
import time
from logging.handlers import TimedRotatingFileHandler
from aiogram import Bot
from config import ADMIN_ERROR

# --- Custom Telegram Handler ---
class TelegramErrorHandler(logging.Handler):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ –≤ Telegram.
    """
    def __init__(self, bot: Bot, level=logging.ERROR):
        super().__init__(level=level)
        self.bot = bot
        self.last_sent_time = 0
        self.cooldown = 60  # seconds

    def emit(self, record: logging.LogRecord):
        current_time = time.time()
        if current_time - self.last_sent_time < self.cooldown:
            return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª –∫—É–ª–¥–∞—É–Ω

        log_entry = self.format(record)
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ Markdown/HTML
        log_entry = log_entry.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
        
        # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(log_entry) > 4000:
            log_entry = log_entry[:4000] + "\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"

        try:
            import asyncio
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ event loop, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ RuntimeError
            try:
                loop = asyncio.get_running_loop()
                loop.create_task(
                    self.bot.send_message(
                        chat_id=ADMIN_ERROR,
                        text=f"üÜò <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞:</b>\n\n<pre>{log_entry}</pre>",
                        parse_mode="HTML"
                    )
                )
                self.last_sent_time = current_time
            except RuntimeError:
                 # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
                 # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –Ω–∞ —Å–∞–º–æ–º —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
                 logging.getLogger(__name__).warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ Telegram: event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

        except Exception as e:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            logging.getLogger(__name__).exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏ –≤ Telegram: {e}")


# --- File Rotation Setup ---
def custom_rotator(source, dest):
    """
    –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–µ –ª–æ–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç bot_YYYY-MM-DD.log
    """
    dirname, basename = os.path.split(dest)
    # dest –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é logs/bot.log.YYYY-MM-DD
    date_part = basename.split('.')[-1]
    new_name = os.path.join(dirname, f"bot_{date_part}.log")
    if os.path.exists(new_name):
        os.remove(new_name)
    os.rename(source, new_name)

# --- Main Setup Function ---
def setup_logger(bot: Bot = None):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    - –ü–∏—à–µ—Ç DEBUG –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π.
    - –ü–∏—à–µ—Ç INFO –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ERROR –ª–æ–≥–∏ –≤ Telegram, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω bot.
    """
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)

    # --- –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã ---
    file_formatter = logging.Formatter(
        "%(asctime)s | %(levelname)-8s | %(name)-25s | %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S"
    )
    console_formatter = logging.Formatter(
        "%(asctime)s | %(levelname)-8s | %(message)s",
        datefmt="%H:%M:%S"
    )

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π) ---
    file_handler = TimedRotatingFileHandler(
        filename=os.path.join(log_dir, "bot.log"),
        when="midnight",
        interval=1,
        backupCount=14,  # –•—Ä–∞–Ω–∏–º –ª–æ–≥–∏ –∑–∞ 14 –¥–Ω–µ–π
        encoding="utf-8"
    )
    file_handler.setFormatter(file_formatter)
    file_handler.setLevel(logging.DEBUG)  # –í —Ñ–∞–π–ª –ø–∏—à–µ–º –≤—Å—ë, –Ω–∞—á–∏–Ω–∞—è —Å DEBUG
    file_handler.rotator = custom_rotator

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ ---
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(console_formatter)
    console_handler.setLevel(logging.INFO) # –í –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ INFO –∏ –≤—ã—à–µ

    # --- –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–≥–æ ---
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º –ª–æ–≥–≥–µ—Ä–µ
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if root_logger.hasHandlers():
        root_logger.handlers.clear()

    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Telegram (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±–æ—Ç) ---
    if bot:
        error_formatter = logging.Formatter(
            "%(levelname)s | %(name)s:%(lineno)d\n\n%(message)s"
        )
        telegram_handler = TelegramErrorHandler(bot=bot)
        telegram_handler.setFormatter(error_formatter)
        root_logger.addHandler(telegram_handler)

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –æ—Ç uvicorn –∏ aiogram –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
    logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
    logging.getLogger("aiogram").setLevel(logging.INFO)
    
    logging.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")

def log_message(message: str, level: int = 0, emoji: str = "", log_level: str = "info"):
    """
    –£–¥–æ–±–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ç–∞—Ä–æ–º —Å—Ç–∏–ª–µ.
    level ‚Äî —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞, emoji ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç.
    """
    indent = " " * (level * 3)
    prefix = f"{emoji} " if emoji else ""
    full_message = f"{indent}{prefix}{message}"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ç –∂–µ –ª–æ–≥–≥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏
    logger = logging.getLogger()

    if log_level == "info":
        logger.info(full_message)
    elif log_level == "warning":
        logger.warning(full_message)
    elif log_level == "error":
        logger.error(full_message)
    elif log_level == "debug":
        logger.debug(full_message)
    else:
        logger.info(full_message) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é info

def log_error(error: Exception, context: str = ""):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π (traceback).
    """
    logger = logging.getLogger()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context}" if context else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º exc_info=True, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å traceback
    logger.error(error_message, exc_info=error)
